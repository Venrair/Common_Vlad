
/* ///////////////////////// */
font-size

<div  style="font-size: 20px;"> ajdbbfef </div>

or 

<p style="font-size: 10px;">qwfqwfqwf</p>

or
/* имя_тега {
    свойство: значение;
  } */
<style>
  div {                  //у div будет 20
    font-size: 20px;
  }
  p {                    //у p будет 10
    font-size: 10px;
  }
</style>

<div>
  Этот текст будет с размером шрифта 20 пикселей

  <p>Вложенный параграф будет иметь размер шрифта 10 пикселей</p>
</div>

/* назначение свойст классу */

<p class="news">                          //назначается класс news
  Текст нашего параграфа
</p>

<style>
.news {                                    //обозначаетсся что всё что есть на стр с классом news будет такого то цвета
  color: #553333;
}
</style>

/* выделить цветом слово */

<p><span class="info">Внимание!</span> Важная информация</p>

<style>
.info {
    color: #5263f3;
  }
  </style>

/* центровка текста */

text-align
left 
center
right
justify -- по ширине 

<p class="important"> IAwbdibawd</p>

<style>
    .important{
        text-align: center;
    }
    </style>

/* размер текста */

font-size: 50px;


/* толщина текста */

font-weight
400 — соответствует значению normal
700 — соответствует значению bold

/* курсив */

font-style

normal — обычный вывод текста.
italic — курсивное начертание
oblique — косое начертание6

/* подчеркивание */

text-decoration

underline — Подчёркивание текста
line-through — Перечёркивание текста
overline — Надчёркивание текста
none -- Чтобы отменить подчёркивание у ссылок

/* Межстрочный интервал */

line-height

/* Выбор шрифта */

<style>
  .verdana-text {
    font-family: Verdana, sans-serif;
  }
</style>

<p class="verdana-text">Тут какой-то текст</p>

/* Перечисление нескольких параметров текста в одном */
<style>
  .bold-text {
    font: bold 24px Verdana, sans-serif;
  }
</style>

<p class="bold-text">Абзац</p>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* РАМКИ */

border-width — ширина границы
border-style — стиль границы
border-color — цвет границы

типы стиля:
dotted
dashed
solid
double
groove
ridge
inset
outset

.element {
    border: 1px solid #ccc;
  }

1px — ширина границы
solid — стиль границы
#ccc — цвет границы 



/* Цвет фона */

background-color
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* PADDING внутренние отступы */

padding-top — внутренний отступ сверху
padding-right — внутренний отступ справа
padding-bottom — внутренний отступ снизу
padding-left — внутренний отступ слева

порядок указания при сокращении:
отступ сверху
отступ справа
отступ снизу
отступ слева

padding: 10px 0 10px 20px;

/* MARGIN Внешние отступы */

margin-top — внешний отступ сверху
margin-right — внешний отступ справа
margin-bottom — внешний отступ снизу
margin-left — внешний отступ слева


/* Ширина и высота БЛОКА */

width
height

<style>
  .square {
    width: 200px;
    height: 100px;
    background-color: #000;
  }
</style>

<div class="square"></div>



/* Фиксация блока что бы Паддинг и Марджин его не двигали */

box-sizing:
  content-box //будет двигать
  border-box  //не будет двигать

////////////////////////////////////////////////////////////
/* много всего вместе */

<div class="card-hello">Awdawdwadwd</div>

<style>
    .card-hello{
        background-color: #fa7268;
        color: #ffffff;
        width: 230px;
        height: 25px;
        padding: 20px;
        margin: 10px;
        border: 2px solid #9c27b0;
        font-size: 20px
    }
</style>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* Работа с элементами внутри контейнера */

/* FLEX */

 display: flex //применять к общему контейнеру в котором лежат элементы

 flex-direction

 row — Элементы выстраиваются в линию, в которой первый элемент находится слева
 row-reverse — Эффект похож на значение row, но элементы выстраиваются в обратном порядке, то есть первый элемент окажется справа
 column — элементы выстраиваются сверху вниз. Первый элемент находится сверху
 column-reverse — элементы выстраиваются снизу вверх, то есть первый элемент находится внизу

<div class="qa">
    <div class='question'>Какие языки</div>
    <div class="answer">Самыми популярными языками</div>
</div>

<style>
    .question{
        width: 40%;
        background-color: LightSalmon;
        color: #FDF5E6
    }
    .answer{
        width: 60%;
        background-color: #FF00FF;
        color: #0000CD
        }
    .qa{
        display: flex;
    }
</style>


/* Перенос элементов внутри контейнера */

flex-wrap
nowrap — значение по умолчанию. Элементы не переносятся
wrap — самое распространенное значение. Элементы переносятся при нехватке пространства внутри контейнера
wrap-reverse — перенос элементов с переворотом порядка элементов по главной оси.

/* Выравнивание элементов внутри контейнера */

justify-content (ГОРИЗОНТАЛЬ - лево право)

flex-start — выравнивание по началу оси
flex-end — выравнивание по концу оси
center — выравнивание контента по центру контейнера
space-between — первый и последний элемент прижимаются к началу и концу оси, а остальные элементы распределяются по остальному пространству
space-around — принцип такой же, как и у значения space-between, но первый и последний элемент так же получают отступы, которые равны половине отступов у остальных элементов

align-items (ВЕРТИКАЛЬ - верх низ)

flex-start — выравнивание по началу побочной оси
flex-end — выравнивание по концу побочной оси
center — выравнивание по центру


/* Медиазапросы */

@media (orientation: portrait) {
    .text {
      color: #ffffff;
    }
  }
  
  @media (orientation: landscape) {
    .text {
      color: #000000;
    }
  }




/* Переменные */

:root {                              //глобальная переменная
    --main-color: #000000;           //имя переменной в формате --имя-переменной
  }
  
  .news-block {
    background-color: var(--main-color);       //использование переменной var(--имя-переменной)
  }
  
  .left-sidebar {
    background-color: var(--main-color);
  }


  /* Позиционирование */

  position: 

  relative 
  (относительное позиционирование). Позволяет изменить расположение элемента относительно того места, где он был расположен до применения свойства. 
  При этом, то место на странице, которое блок занимал ранее, останется. То есть другие блоки не будут вставать на место, где блок располагался до применения правила position.

  absolute 
  (абсолютное позиционирование). «Вынимает» блок из HTML вёрстки и изменяет его расположение относительно левого верхнего угла страницы 
  (или родительского элемента, если у него есть свойство position в значении fixed, absolute, relative, или sticky). В отличии от relative, место, 
  где располагался absolute блок, будет удалено, и другие блоки смогут занять это место.

  fixed 
  Также, как и absolute, данное правило извлечёт блок из HTML вёрстки и расположит его в левом верхнем углу.
  Отличием от абсолютного позиционирования является то, что блок будет «следовать за страницей» и всегда находится в зоне видимости пользователя. 
  Это удобно для создания меню, которые должны следовать за пользователем.